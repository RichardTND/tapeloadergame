;***********************************
;
;TAPE TOOL BUILD - IRQ LOADER SYSTEM 
;ROUTINE MADE SPECIALLY FOR TAPE LOADER 
;GAMES.
;
;Tape loader source by Martin Piper
;************************************

;--------------------------------------
;IMPORTANT...
;Make sure you have downloaded the
;complete TapeTool V1.0.0.5 archive 

;TapeTool V1.0.0.5 is available here:
;https://csdb.dk/release/?id=160636

;Newer versions of TapeTool (featuring
;RLE compression) will not work with
;this tape loader source.

;- Richard
;--------------------------------------


TurboTapeHeaderStatus					= $04
TurboTapeFinishedLoadingFile			= $05
TapeLoaderStoringToLo					= $06
TapeLoaderStoringToHi					= $07
TapeLoaderExpectedLoadingBlocks			= $08

TurboTapeBlockLoadError					= $09


; The screen offset for the tape counter
;(ROW+COLUMN)
TapeLoadErrorLine = 16
TapeCounterOffset = 1*37

;---------------------------------------
;LOADER GAME ADDRESSES
;
LOADERGAMEINIT = $1F00
LOADERGAMEPLAY = $1F03
;---------------------------------------
;SCREEN MULTICOLOUR MODE ON ($18)/OFF ($08)
;Does your loader game use multicolour?

MULTICOLOUR_MODE = $18
;---------------------------------------
;CRUNCHED/BASIC START GAME DATA (Must 
;run via a BASIC SYS start to work).
;
RELOCATED_PROGRAM_MEMORY = $3500
BASIC_LOAD_ADDRESS = $0801
GAME_JUMP_ADDRESS = $080d
;---------------------------------------


!pseudopc $f000 {
.yposSplit = $fa
MainSecondLoaderStart
	; IRQs are already off here, but we duplicate the SEI just to make it obvious what we are doing.
	sei
	; Grab everything on the stack
	ldx #$ff
	txs

	; Init the processor port.
	; Technically this is already done by the CIA loader but we duplicate this here just make it obvious.
	ldx #ProcessorPortDDRDefault
	stx ZPProcessorPortDDR
	; Turns on cassette motor and removes ROMs
	lda #%101
	sta ZPProcessorPort

	; Clear the screen
	ldx #0

	stx SIDVolumeFilter

	lda #' '
.cl1
	sta SCREENRAM,x
	sta SCREENRAM+$100,x
	sta SCREENRAM+$200,x
	sta SCREENRAM+$2e8,x
	dex
	bne .cl1

	; Initialise the scroller text and tape counter white colour
	ldy #39
	lda #VIC2Colour_White
.l2
	sta COLOURRAM+(24*40),y
	dey
	bpl .l2
	sta COLOURRAM+TapeCounterOffset
	sta COLOURRAM+TapeCounterOffset+1
	sta COLOURRAM+TapeCounterOffset+2

!ifdef Scroller_LOTD {
	ldy #.text2End - .text2
.l2b
	lda .text2-1,y
	sta SCREENRAM+(9*40)-1,y
	lda #VIC2Colour_Yellow
	sta COLOURRAM+(9*40)-1,y
	dey
	bne .l2b
}

	; Enable loading any data now
	jsr TapeLoaderInitialiseIRQ
	lda #0
	jsr TapeLoaderLoadNewFile
	cli


	; Set a solid or clear sprite as default
	ldy #63
!ifdef Scroller_LOTD {
	lda #0
} else {
	lda #255
}
.l3
	sta $200,y
	dey
	bpl .l3

	; Initialise the sprite display and the screen display
	lda #0
	sta VIC2SpriteMulticolour
	sta VIC2SpritePriority
	sta VIC2SpriteDoubleWidth
	sta VIC2SpriteDoubleHeight
	sta VIC2ScreenColour
	lda #8	; Sprite data at $200-$23f
	sta SPRITEFRAME
!ifdef Scroller_LOTD {
	lda #170
	sta VIC2Sprite0X
	lda #0
	sta VIC2SpriteXMSB
	lda #70
	sta VIC2Sprite0Y
} else {
!ifdef OpenBorders {
	lda #170
	sta VIC2Sprite0X
	lda #0
	sta VIC2SpriteXMSB
	lda #VIC2SpriteYBorderTop-38
	sta VIC2Sprite0Y
} else {
	lda #<(VIC2SpriteXBorderRight-VIC2SpriteSizeX)
	sta VIC2Sprite0X
	lda #1
	sta VIC2SpriteXMSB
	lda #VIC2SpriteYBorderTop
	sta VIC2Sprite0Y
}
}
	lda .spriteColours
	sta VIC2Sprite0Colour
	; And switch on the sprite
!ifdef MainLoad_EnableScreen {
	lda #1
	sta VIC2SpriteEnable
}
	; Setup some screen display values, just to make sure everything is OK
	lda #VIC2MemorySetupDefault
	sta VIC2MemorySetup
	; Set VIC bank 0
	lda #CIA2PortASerialBusVICBankDefault
	sta CIA2PortASerialBusVICBank
	lda #VIC2ScreenControlHDefault
	sta VIC2ScreenControlH
!ifdef MainLoad_EnableScreen {
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV
}

.MainLoop
	; Some debugging that allows us to see spare mainline cycles between the IRQs by changing the screen colour
!if 0 {
	inc VIC2ScreenColour
	dec VIC2ScreenColour
	jmp .MainLoop
}

.s00
	lda VIC2Raster
	cmp #.yposSplit
	bcc .s00

	; Scrolling split
	lda #MULTICOLOUR_MODE
	sta VIC2ScreenControlH

!ifdef OpenBorders {
.notYet1
	lda VIC2Raster
	cmp #VIC2SpriteYBorderBottom-2
	bcc .notYet1

	; Step 1 of opening the bottom borders
	lda VIC2ScreenControlV
	eor #%1000
	sta VIC2ScreenControlV

	lda #%10000000
.notYet2
	bit VIC2ScreenControlV
	beq .notYet2

	; Step 2 of opening the bottom borders
	lda VIC2ScreenControlV
	eor #%1000
	sta VIC2ScreenControlV
}

	; There is some spare time here so use it for playing the loadergame
	; If the loadergame isn't yet loaded then don't play it :)
	lda .loadergameinited
	beq .s1
	; Play
	jsr LOADERGAMEPLAY
.s1


	; Now wait for the raster to move off the bottom of the screen
	; After the open border code or the loadergame will be fine.
.s0
	lda VIC2Raster
	cmp #.yposSplit
	bcs .s0
!ifdef OpenBorders {
	lda #0
} else {
	lda #MULTICOLOUR_MODE
}
	sta VIC2ScreenControlH

	; Now it is safe to execute routines that can take some time

	; Here is where this scroller routine will display some text while the loadergame data loads, then plays and then the final application loads and runs.
	lda TurboTapeFinishedLoadingFile
	beq .SkipFileLoaded1

	; Check what was just loaded
	ldx FileNameByte
	cpx #2	; For the code we want to load an start
	beq .startLoadedCode

	; Prepare the IRQ loader to load the next file
	inc FileNameByte
	lda FileNameByte
	jsr TapeLoaderLoadNewFile

	; Check the filename
	cpx #0
	beq .SkipFileLoaded1
	cpx #1
	beq .Initloadergame1
	jmp .startLoadedCode
.SkipFileLoaded1
	jmp .SkipFileLoaded
.Initloadergame1
	jmp .Initloadergame
	; Add extra cases here for file name bytes we want to handle

.startLoadedCode

	;Prompt user to press spacebar on loadergame prompt 
	
	lda #$35
	sta $01
	ldx #$00
putprompt
	lda spaceprompt,x 
	sta $0412,x 
	inx 
	cpx #spacepromptend-spaceprompt 
	bne putprompt 
	
;Main loop 

SpaceLoop 
	lda $dc01
	cmp #$ef
	bne DoNotRunGame
	jmp .relocation
DoNotRunGame 
	lda #$fa
	cmp $d012 
	bne *-3
	jsr LOADERGAMEPLAY
	jmp SpaceLoop 
	
	; Start the main code we just loaded
.relocation
	
	lda #$00
	sta $d019
	sta $d01a
	sta $d015 
	sta $d020
	sta $d021
	lda #$81
	sta $dc0d
	sta $dd0d
	
	ldx #$00
clearallsound
	lda #$00
	sta $d400,x 
	inx
	cpx #$18
	bne clearallsound
	ldx #$00
blackout 
	lda #$00
	sta $d800,x 
	sta $d900,x 
	sta $da00,x 
	sta $dae8,x 
	lda relocator,x 
	sta $0100,x
	inx 
	bne blackout 
	lda #$00
	sta $0800,x
	cli 
	jmp $0100
	
relocator 
	sei
	lda #$34
	sta $01
mover1	
	ldx #$00
mover2

	lda RELOCATED_PROGRAM_MEMORY,x 
	sta BASIC_LOAD_ADDRESS,x
	inx 
	bne mover2
	inc $0109
	inc $010c
	lda $0109
	bne mover1 

	lda #ProcessorPortDefault
	sta ZPProcessorPort
	; Init string display stack
	lda #0
	sta $18

	; If the NMI from TapeLoaderCIA.a was used MACROAckAllIRQs_A will ACK the NMI and allow the restore key to work again.
	; If you want BASIC to ignore the restore key then comment out the MACROAckAllIRQs_A line below.
	
	jsr $fda3	; Init I/O
	jsr $fd15	; Restore the normal IRQ
	jsr $ff5b	; Screen on
	cli
	jmp GAME_JUMP_ADDRESS


	; Some small functions to flag updates close to where they are branched from
.Initloadergame
	lda #0
	jsr LOADERGAMEINIT
	lda #1
	sta .loadergameinited
;	jmp .SkipFileLoaded

.SkipFileLoaded

	; Use the low byte of the tape storage address to cycle the sprite colours
	lda TapeLoaderStoringToLo
	lsr
	lsr
	lsr
	tax
	;lda .spriteColours,x
	;sta VIC2Sprite0Colour

	lda TurboTapeBlockLoadError
	beq .noLoadError

	lda .stopPressed
	bne .rrwnd
	+DisplayColourTextMiddle_AX .textLoadErrorPressStop , .textLoadErrorPressStopEnd , SCREENRAM + (TapeLoadErrorLine*40), VIC2Colour_LightRed
	jmp .overText
.rrwnd
	+DisplayColourTextMiddle_AX .textLoadErrorPressRewind , .textLoadErrorPressRewindEnd , SCREENRAM + (TapeLoadErrorLine*40) , VIC2Colour_LightRed
.overText

	; Test for stop being pressed
	lda ZPProcessorPort
	and #%10000
	beq .notStop

	lda #1
	sta .stopPressed

	; Enable the tape motor
	lda ZPProcessorPort
	and #%11011111
	sta ZPProcessorPort

	jmp .endLoadErrorCode

.notStop
	; Play or rewind or FFWD is pressed, was the stop key pressed?
	lda .stopPressed
	beq .endLoadErrorCode

	; If yes, get rid of the message
	lda #0
	sta TurboTapeBlockLoadError
	sta .stopPressed

.noLoadError
	ldx #40
	lda #' '
.cll1
	sta SCREENRAM-1 + (TapeLoadErrorLine*40),x
	dex
	bne .cll1

.endLoadErrorCode

	; Display the blocks left to load
	lda TapeLoaderExpectedLoadingBlocks
	beq .noTapeCount
	jsr TapeLoaderGetBlocksLeftToLoad
	tay
	lda TableMod10,y
	clc
	adc #'0'
	sta SCREENRAM+TapeCounterOffset+2
	ldx TableDiv10,y
	lda TableMod10,x
	clc
	adc #'0'
	sta SCREENRAM+TapeCounterOffset+1
	lda TableDiv100,y
	clc
	adc #'0'
	sta SCREENRAM+TapeCounterOffset
	jmp .tapeCountEnd
.noTapeCount
	lda #' '
	sta SCREENRAM+TapeCounterOffset
	sta SCREENRAM+TapeCounterOffset+1
	sta SCREENRAM+TapeCounterOffset+2
.tapeCountEnd

	
	jmp .MainLoop

.stopPressed !by 0
.loadergameinited !by 0
.xpos !by 7
.nextChar !by 0
!ifdef Scroller_LOTD {
} else {

}
.textEnd

spaceprompt !scr "loaded ... press space"
spacepromptend
 

.textLoadErrorPressStop
!scr "load error. press stop"
.textLoadErrorPressStopEnd
.textLoadErrorPressRewind
!scr "rewind the tape then press play"
.textLoadErrorPressRewindEnd

;.spriteColours !by VIC2Colour_DarkGrey,VIC2Colour_Grey,VIC2Colour_LightGrey,VIC2Colour_White,VIC2Colour_LightGrey,VIC2Colour_Grey,VIC2Colour_DarkGrey,VIC2Colour_DarkGrey
; Better sprite pulse colours than the grey table above
.spriteColours
	!by VIC2Colour_Black,VIC2Colour_Blue,VIC2Colour_Brown,VIC2Colour_Red
	!by VIC2Colour_DarkGrey,VIC2Colour_Purple,VIC2Colour_Orange,VIC2Colour_Grey
	!by VIC2Colour_LightBlue,VIC2Colour_Green,VIC2Colour_LightRed,VIC2Colour_Cyan
	!by VIC2Colour_LightGrey,VIC2Colour_Yellow,VIC2Colour_LightGreen,VIC2Colour_White
	!by VIC2Colour_LightGreen,VIC2Colour_Yellow,VIC2Colour_LightGrey,VIC2Colour_Cyan
	!by VIC2Colour_LightRed,VIC2Colour_Green,VIC2Colour_LightBlue,VIC2Colour_Grey
	!by VIC2Colour_Orange,VIC2Colour_Purple,VIC2Colour_DarkGrey,VIC2Colour_Red
	!by VIC2Colour_Brown,VIC2Colour_Blue,VIC2Colour_Black,VIC2Colour_Black

; Lookup tables to convert the remaing blocks left to load value into hundreds, tens and units.
TableMod10 !for .t,256 {!by (.t-1) % 10}
TableDiv10 !for .t,256 {!by (.t-1) / 10}
TableDiv100 !for .t,256 {!by (.t-1) / 100}

!source "TapeLoaderCIAIRQ.a"

; Must be the last bit of memory since this table is not allocated. Why bother to load a table
; full of zeros? :)
BlocksLoadedTable = *
!if BlocksLoadedTable > $fe00 {
!error "This table must not start later than $fe00."
}

MainSecondLoaderEnd
}
